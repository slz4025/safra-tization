COMMAND
run ./safra BuechiExamples/[input_file] [out_file] <-t>

INPUT
The input file should be a Buchi (non-deterministic) automata with an ".aut" extension and of the following format:
BUECHI
# Rabin size: <n', number of nodes in the expected output Rabin automata>
# Rabin transitions: <|delta|, number of tuples in the expected output Rabin transition function>
# Number of states
<n, number number of nodes in the input Buchi automata>
# Alphabet size
<|Sigma|, the size of the alphabet, where elements are indexed from 1-|Sigma|>
# Number of transitions
<|tau|, number of tuples in the input Buchi transition relation, should equal the number of lines between "# begin transitions" and "# end transitions">
# begin transitions
<three space separated numbers, where:
1) id of the input node [1-n]
2) id of the transitioning alphabet character [1-|Sigma|]
3) id of the output node [1-n]
>
<another three-tuple>
<another three-tuple>
<another three-tuple>
...
# end transitions
# Buechi initial
<I, space separated list of the ids of the Buchi nodes that are initial nodes>
# Buechi final
<F, space separated list of the ids of the Buchi nodes that are final nodes>
# Buechi eof

Put the input file in BuechiExamples/ or use an existing file there.  Please use it is an example of a good input file.

OUTPUT
The output file will be the specification of a Rabin automata, made through the Safra algorithm.
It will be of the following format:
RABIN
# Buechi File: BuechiExamples/<input file>.aut
# Number of states
<n', number of states in Buchi automata>
# Alphabet size
<|Sigma|, size of the alphabet, where the elements are indexed by 1-|Sigma|>
# Number of transitions
<|delta|, number of tuples in Buchi automata transition function, |delta| is equal to the number of lines between "# begin transitions" and "# end transitions">
# begin transitions
<three space separated numbers, where:
1) id of the input node [1-n]
2) id of the transitioning alphabet character [1-|Sigma|]
3) id of the output node [1-n]
>
<another three-tuple>
<another three-tuple>
<another three-tuple>
...
# end transitions
# Number of Rabin pairs
<number of left/right Rabin pairs>
# Rabin pairs
<a pair of lists indicating which nodes are in the left (rejecting) final states and which are in the right (accepting) final states of the pair>
<another pair>
<another pair>
<another pair>
...
# Rabin eof

The flag, -t, prints out the Safra trees generated by the Safra program in the order in which they are made.
